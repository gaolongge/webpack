/**
 * laoder: 现不同种类资源模块加载;
 *   如：  css-loader 先把 CSS 代码转换为 JS 模块，才可以正常打包;
 *         style-loader 将 css-loader 中所加载到的所有样式模块，通过创建 style 标签的方式添加到页面上。
 * 
 * 即便是通过 JS 代码去加载的 CSS 模块，css-loader 和 style-loader 仍然可以正常工作。
 * 因为 Webpack 在打包过程中会循环遍历每个模块，然后根据配置将每个遇到的模块交给对应的 Loader 去处理，
 * 最后再将处理完的结果打包到一起。
 * 
 * 为什么要在 JS 中加载其他资源?
 * 
 * Webpack 为什么要在 JS 中载入 CSS 呢？不是应该将样式和行为分离么？
 * 可能你乍一想好像不太容易理解，那你可以做一个假设：假设我们在开发页面上的某个局部功能时，需要用到一个样式模块和一个图片文件。
 * 如果你还是将这些资源文件单独引入到 HTML 中，然后再到 JS 中添加对应的逻辑代码。试想一下，如果后期这个局部功能不用了，
 * 你就需要同时删除 JS 中的代码和 HTML 中的资源文件引入，也就是同时需要维护这两条线。而如果你遵照 Webpack 的这种设计，
 * 所有资源的加载都是由 JS 代码控制，后期也就只需要维护 JS 代码这一条线了。
 *  所以说，通过 JavaScript 代码去引入资源文件，或者说是建立 JavaScript 和资源文件的依赖关系，具有明显的优势。
 * 因为 JavaScript 代码本身负责完成整个应用的业务功能，放大来说就是驱动了整个前端应用，
 *  而 JavaScript 代码在实现业务功能的过程中需要用到样式、图片等资源文件。
 * 
 * */
 /**
  * Webpack 的另外一个重要的核心特性：插件机制。
  * Webpack 插件机制的目的是为了增强 Webpack 在项目自动化构建方面的能力。
  * 通过上一讲的介绍你应该知道，Loader 就是负责完成项目中各种各样资源模块的加载，从而实现整体项目的模块化，
  * 而 Plugin 则是用来解决项目中除了资源模块打包以外的其他自动化工作，所以说 Plugin 的能力范围更广，用途自然也就更多。
  * 
  * 插件最常见的应用场景：
  *     实现自动在打包之前清除 dist 目录（上次的打包结果）；
		自动生成应用所需要的 HTML 文件；
		根据不同环境为代码注入类似 API 地址这种可能变化的部分；
		拷贝不需要参与打包的资源文件到输出目录；
		压缩 Webpack 打包完成后输出的文件；
		自动发布打包结果到服务器实现自动部署。
  * 
  * HtmlWebpackPlugin两个作用:
  *   1、为html文件中引入的外部资源如script、link动态添加每次compile后的hash，防止引用缓存的外部文件问题
  *   2、可以生成创建html入口文件，比如单页面可以生成一个html文件入口，
  *      配置N个html-webpack-plugin可以生成N个页面入口
  * 
  * 
  * 
  * 自定义插件：Webpack 要求我们的插件必须是一个函数或者是一个包含 apply 方法的对象
  * ，一般我们都会定义一个类型，在这个类型中定义 apply 方法。
  * 然后在使用时，再通过这个类型来创建一个实例对象去使用这个插件。
  * 
  * 
  *   * 我们知道相比于 Loader，插件的能力范围更宽，
  * 因为 Loader 只是在模块的加载环节工作，
  * 而插件的作用范围几乎可以触及 Webpack 工作的每一个环节。
  * 
  * 
  * 插件机制的工作原理，总结下来就是一句话：
  *   Webpack 为每一个工作环节都预留了合适的钩子，
  *   我们在扩展时只需要找到合适的时机去做合适的事情就可以了。
  * 
  * 
  * Webpack 打包的核心工作过程：
  *   我们以一个普通的前端项目为例，项目中一般都会散落着各种各样的代码及资源文件：如css，js，.png, .txt,scss,.json等；
  * 	这些文件在 Webpack 的思想中都属于当前项目中的一个模块。
  * 	Webpack 可以通过打包，将它们最终聚集到一起。
  * 
  * Webpack 在整个打包的过程中：
  *   1、通过 Loader 处理特殊类型资源的加载，例如加载样式、图片；
  *   2、通过 Plugin 实现各种自动化的构建任务，例如自动压缩、自动发布。
  * 
  * 具体来看打包的过程，Webpack 启动后，会根据我们的配置，
  * 找到项目中的某个指定文件（一般这个文件都会是一个 JS 文件）作为入口。然后顺着入口文件中的代码，
  * 根据代码中出现的 import（ES Modules）或者是 require（CommonJS）之类的语句，解析推断出来这个文件所依赖的资源模块，
  * 然后再分别去解析每个资源模块的依赖，周而复始，最后形成整个项目中所有用到的文件之间的依赖关系树
  * */